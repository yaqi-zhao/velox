# Copyright (c) Facebook, Inc. and its affiliates.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH}
                      "${CMAKE_CURRENT_SOURCE_DIR}/cmake_modules/")

include(ExternalProject)
if(NOT DEFINED CMAKE_INSTALL_LIBDIR)
  set(CMAKE_INSTALL_LIBDIR "lib")
endif()

if(VELOX_ENABLE_QPL)
  message(STATUS "Building QPL from source")
  set(QPL_PREFIX "${CMAKE_CURRENT_BINARY_DIR}/qpl_ep/install")
  set(QPL_STATIC_LIB_NAME ${CMAKE_STATIC_LIBRARY_PREFIX}qpl${CMAKE_STATIC_LIBRARY_SUFFIX})
  set(QPL_STATIC_LIB "${QPL_PREFIX}/lib/${QPL_STATIC_LIB_NAME}")

  set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -ldl -laccel-config -L/usr/lib64")    

  set(QPL_CMAKE_ARGS
    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
    -DCMAKE_INSTALL_LIBDIR=${QPL_PREFIX}/lib
    -DCMAKE_INSTALL_PREFIX=${QPL_PREFIX}
    -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}
    -DEFFICIENT_WAIT=OFF
    -DQPL_BUILD_TESTS=OFF
    -DCMAKE_C_COMPILER=gcc
    -DCMAKE_CXX_COMPILER=g++
    -DQPL_LIB=ON)

  ExternalProject_Add(qpl_ep
                      ${EP_LOG_OPTIONS}
                      URL https://github.com/intel/qpl/archive/refs/tags/v1.2.0.tar.gz
                      BUILD_BYPRODUCTS "${QPL_STATIC_LIB}"
                      CMAKE_ARGS ${QPL_CMAKE_ARGS}
                     )

  file(MAKE_DIRECTORY "${QPL_PREFIX}/include")

  add_library(qpl::qpl STATIC IMPORTED GLOBAL)
  set(QPL_LIBRARIES ${QPL_STATIC_LIB})
  set(QPL_INCLUDE_DIRS "${QPL_PREFIX}/include")
  target_link_libraries(qpl::qpl INTERFACE /usr/lib64/libaccel-config.so)
  set_target_properties(qpl::qpl
                        PROPERTIES IMPORTED_LOCATION ${QPL_LIBRARIES}
                                   INTERFACE_INCLUDE_DIRECTORIES ${QPL_INCLUDE_DIRS})

  add_dependencies(qpl::qpl qpl_ep)

endif()

if(VELOX_ENABLE_ARROW)
  find_package(Thrift)
  if(Thrift_FOUND)
    set(THRIFT_SOURCE "SYSTEM")
  else()
    set(THRIFT_SOURCE "BUNDLED")
  endif()

  # Use external arrow & parquet only if <package>_DIR is defined
  if(DEFINED Arrow_HOME)
    find_package(Arrow PATHS "${Arrow_HOME}/arrow_install" NO_DEFAULT_PATH)
    find_package(Parquet PATHS "${Arrow_HOME}/arrow_install" NO_DEFAULT_PATH)
    if(Arrow_FOUND AND Parquet_FOUND)
      add_library(arrow INTERFACE)
      add_library(parquet INTERFACE)

      if(TARGET Arrow::arrow_static)
        target_link_libraries(arrow INTERFACE Arrow::arrow_static)
      else()
        target_link_libraries(arrow INTERFACE Arrow::arrow_shared)
      endif()

      if(TARGET Parquet::parquet_static)
        target_link_libraries(parquet INTERFACE Parquet::parquet_static)
      else()
        target_link_libraries(parquet INTERFACE Parquet::parquet_shared)
      endif()

      message(STATUS "Using pre-builded arrow")
    endif()

    if (Thrift_FOUND)
      add_library(thrift INTERFACE)
      target_link_libraries(thrift INTERFACE thrift::thrift)
      message(STATUS "Using system thrift")
    else()
      add_library(thrift STATIC IMPORTED GLOBAL)
      if(NOT Thrift_FOUND)
        set(THRIFT_ROOT ${Arrow_HOME}/arrow_ep/cpp/build/thrift_ep-install)
        if(CMAKE_BUILD_TYPE STREQUAL "Debug")
          set(THRIFT_LIB ${THRIFT_ROOT}/lib/libthriftd.a)
        else()
          set(THRIFT_LIB ${THRIFT_ROOT}/lib/libthrift.a)
        endif()

        file(MAKE_DIRECTORY ${THRIFT_ROOT}/include)
        set(THRIFT_INCLUDE_DIR ${THRIFT_ROOT}/include)
      endif()

      set_property(TARGET thrift PROPERTY INTERFACE_INCLUDE_DIRECTORIES
              ${THRIFT_INCLUDE_DIR})
      set_property(TARGET thrift PROPERTY IMPORTED_LOCATION ${THRIFT_LIB})
      message(STATUS "Using pre-builded thrift")
    endif ()
    return()
  endif()

  set(ARROW_PREFIX "${CMAKE_CURRENT_BINARY_DIR}/arrow_ep")
  set(ARROW_CMAKE_ARGS
      -DARROW_PARQUET=ON
      -DARROW_WITH_LZ4=ON
      -DARROW_WITH_SNAPPY=ON
      -DARROW_WITH_ZLIB=ON
      -DARROW_WITH_ZSTD=ON
      -DARROW_JEMALLOC=OFF
      -DARROW_SIMD_LEVEL=NONE
      -DARROW_RUNTIME_SIMD_LEVEL=NONE
      -DARROW_WITH_UTF8PROC=OFF
      -DCMAKE_INSTALL_PREFIX=${ARROW_PREFIX}/install
      -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
      -DARROW_BUILD_STATIC=ON
      -DThrift_SOURCE=BUNDLED
      -Dre2_SOURCE=AUTO)
  set(ARROW_LIBDIR ${ARROW_PREFIX}/install/${CMAKE_INSTALL_LIBDIR})

  add_library(thrift STATIC IMPORTED GLOBAL)
  if(NOT Thrift_FOUND)
    set(THRIFT_ROOT ${ARROW_PREFIX}/src/arrow_ep-build/thrift_ep-install)
    if(CMAKE_BUILD_TYPE STREQUAL "Debug")
      set(THRIFT_LIB ${THRIFT_ROOT}/lib/libthriftd.a)
    else()
      set(THRIFT_LIB ${THRIFT_ROOT}/lib/libthrift.a)
    endif()

    file(MAKE_DIRECTORY ${THRIFT_ROOT}/include)
    set(THRIFT_INCLUDE_DIR ${THRIFT_ROOT}/include)
  endif()

  set_property(TARGET thrift PROPERTY INTERFACE_INCLUDE_DIRECTORIES
                                      ${THRIFT_INCLUDE_DIR})
  set_property(TARGET thrift PROPERTY IMPORTED_LOCATION ${THRIFT_LIB})

  set(VELOX_ARROW_BUILD_VERSION 11.0.0)
  set(VELOX_ARROW_BUILD_SHA256_CHECKSUM
      4c720f943eeb00924081a2d06c5c6d9b743411cba0a1f82f661d37f5634badea)
  set(VELOX_ARROW_SOURCE_URL
      "https://github.com/oap-project/arrow/archive/refs/tags/v${VELOX_ARROW_BUILD_VERSION}-gluten-1.0.0.tar.gz"
  )

  resolve_dependency_url(ARROW)

  ExternalProject_Add(
    arrow_ep
    PREFIX ${ARROW_PREFIX}
    URL ${VELOX_ARROW_SOURCE_URL}
    SOURCE_SUBDIR cpp
    CMAKE_ARGS ${ARROW_CMAKE_ARGS}
    BUILD_BYPRODUCTS ${ARROW_LIBDIR}/libarrow.a ${ARROW_LIBDIR}/libparquet.a
                     ${THRIFT_LIB})
  add_library(arrow STATIC IMPORTED GLOBAL)
  add_library(parquet STATIC IMPORTED GLOBAL)
  add_dependencies(arrow arrow_ep)
  add_dependencies(parquet arrow)
  file(MAKE_DIRECTORY ${ARROW_PREFIX}/install/include)
  set_target_properties(
    arrow parquet PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
                             ${ARROW_PREFIX}/install/include)
  set_target_properties(arrow PROPERTIES IMPORTED_LOCATION
                                         ${ARROW_LIBDIR}/libarrow.a)
  set_property(TARGET arrow PROPERTY INTERFACE_LINK_LIBRARIES ${RE2} thrift)
  set_target_properties(parquet PROPERTIES IMPORTED_LOCATION
                                           ${ARROW_LIBDIR}/libparquet.a)

endif()
